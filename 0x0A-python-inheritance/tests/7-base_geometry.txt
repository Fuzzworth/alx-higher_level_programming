The ``7-base_geometry`` module
======================

Using ``BaseGeometry``
-------------------

This is an example text file in reStructuredText format.  First import
``BaseGeometry`` from the ``7-base_geometry`` module:

	>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
	>>> area = BaseGeometry.area
	>>> integer_validator = BaseGeometry.integer_validator
	>>> mod_docs = __import__('7-base_geometry').__doc__
	>>> class_docs = BaseGeometry.__doc__
	>>> area_docs = area.__doc__
	>>> int_docs = integer_validator.__doc__
	>>> len(mod_docs) > 0
	True
	>>> len(class_docs) > 0
	True
	>>> len(area_docs) > 0
	True
	>>> len(int_docs) > 0
	True
	>>> bg = BaseGeometry()
	>>> bg.area()
	Traceback (most recent call last):
	Exception: area() is not implemented
	>>> bg.area(1,2,3)
	Traceback (most recent call last):
	TypeError: BaseGeometry.area() takes 1 positional argument but 4 were given
	>>> bg.integer_validator()
	Traceback (most recent call last):
	TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'
	>>> bg.integer_validator("hello")
	Traceback (most recent call last):
	TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'
	>>> bg.integer_validator("hello", 1, 100)
	Traceback (most recent call last):
	TypeError: BaseGeometry.integer_validator() takes 3 positional arguments but 4 were given
	>>> bg.integer_validator("distance", 10)
	>>> bg.integer_validator("bool", False)
	Traceback (most recent call last):
	TypeError: bool must be an integer
	>>> bg.integer_validator("my_int", 12)
	>>> bg.integer_validator("width", 89)
	>>> bg.integer_validator("name", "John")
	>>> bg.integer_validator("age", 0)
	>>> bg.integer_validator("distance", -4)
